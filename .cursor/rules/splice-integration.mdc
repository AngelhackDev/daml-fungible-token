# Splice API Integration

## Core Interfaces

- **HoldingV1**: Token holding interface implemented in [TokenHolding.daml](/fungible-token/daml/Fungible/TokenHolding.daml)
- **TransferInstructionV1**: Transfer instruction interface with TransferFactory and TransferInstruction
- **AllocationInstructionV1**: Allocation instruction interface with AllocationFactory
- **AllocationV1**: Allocation interface for DvP scenarios

## Import Patterns

```haskell
import Splice.Api.Token.HoldingV1 qualified as HoldingV1
import Splice.Api.Token.MetadataV1 as Api.Token.MetadataV1
import Splice.Api.Token.TransferInstructionV1 qualified as TransferInstrV1
import Splice.Api.Token.AllocationV1 qualified as AllocationV1
```

## Metadata Handling

- Use `Splice.Api.Token.MetadataV1.Metadata` for extensible metadata
- Implement proper metadata passing through all operations
- Use `DA.TextMap` for metadata key-value pairs

## Testing Integration

- Use Splice testing utilities from [external-test-sources/](/external-test-sources/)
- Reference Amulet implementation for comparison
- Test against Splice API compliance

## Dependencies

- Splice API DARs in [dars/](/dars/) directory
- External test sources for comprehensive testing
- Amulet reference implementation for validation

## Interface Compliance

- Ensure all templates implement required Splice interfaces
- Follow Splice API patterns for consistency
- Maintain compatibility with Splice ecosystem
description:
globs:
alwaysApply: false

---
