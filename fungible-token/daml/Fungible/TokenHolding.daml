module Fungible.TokenHolding where

import DA.Optional (isNone, isSome)

import Splice.Api.Token.HoldingV1 as Api.Token.HoldingV1
import Splice.Api.Token.MetadataV1 as Api.Token.MetadataV1

template TokenHolding with
    admin : Party
    owner : Party
    amount : Decimal
    instrumentId : Api.Token.HoldingV1.InstrumentId
    lock : Optional Api.Token.HoldingV1.Lock
    meta : Api.Token.MetadataV1.Metadata
  where
    signatory admin, owner
    ensure admin == instrumentId.admin && amount > 0.0

    -- Implement the Holding interface
    interface instance Api.Token.HoldingV1.Holding for TokenHolding where
      view = Api.Token.HoldingV1.HoldingView with
        owner = owner
        instrumentId = instrumentId
        amount = amount
        lock = lock
        meta = meta

    choice LockHolding: ContractId TokenHolding
      with
        holders: [Party]
      controller owner
      do
        assertMsg "Holding is already locked" (isNone lock)
        create TokenHolding with
          admin = admin
          owner = owner
          amount = amount
          instrumentId = instrumentId
          lock = Some Api.Token.HoldingV1.Lock with
            holders = holders
            expiresAt = None
            expiresAfter = None
            context = None
          meta = meta

    choice UnlockHolding: ContractId TokenHolding
      controller owner :: case lock of
                  Some l -> l.holders
                  None -> []
      do
        assertMsg "Holding is not locked" (isSome lock)
        create TokenHolding with
          admin = admin
          owner = owner
          amount = amount
          instrumentId = instrumentId
          lock = None
          meta = meta
