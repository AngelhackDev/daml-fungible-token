module Tests.Holding where

import Prelude hiding (forA)

import DA.Action (when, unless, void, foldlA)
import DA.Assert
import DA.Exception
import DA.Foldable (forA_)
import DA.List (dedupSort, head)
import DA.Map (Map)
import qualified DA.Map as Map
import DA.Optional (fromOptional, optionalToList)
import DA.Set (Set)
import qualified DA.Set as Set
import qualified DA.TextMap as TextMap
import DA.Traversable (forA)
import qualified DA.Text as T
import DA.Time
import Daml.Script

import Splice.Api.Token.MetadataV1 as Api.Token.MetadataV1
import Splice.Api.Token.HoldingV1 as Api.Token.HoldingV1
import Splice.Api.Token.AllocationV1 as Api.Token.AllocationV1
import Splice.Api.Token.TransferInstructionV1

import Fungible.TokenHolding qualified as TokenHolding (LockHolding(..), UnlockHolding(..))
import Fungible.TokenMint qualified as TokenMint (TokenMintRequest(..), AcceptMint(..))
import Scripts.TokenHolding qualified as TokenHoldingScripts (listHoldings, balanceOf)
import Tests.Utils

data HoldingState = HoldingState
  with
    bank: Party
    alice: Party
    bob: Party
    charlie: Party
    ccInstrumentId: InstrumentId
    usdtInstrumentId: InstrumentId
    aliceHoldings: [(ContractId Holding, HoldingView)]
    bobHoldings: [(ContractId Holding, HoldingView)]
    charlieHoldings: [(ContractId Holding, HoldingView)]

setupHolding: Script HoldingState
setupHolding = do
  bank <- createParty "Bank"
  alice <- createParty "Alice"
  bob <- createParty "Bob"
  charlie <- createParty "Charlie"

  -- Bank issues new tokens
  let ccInstrumentId = Api.Token.HoldingV1.InstrumentId with
        admin = bank
        id = "CC"
  let usdtInstrumentId = Api.Token.HoldingV1.InstrumentId with
        admin = bank
        id = "USDT"
  
  -- Bank mints to Alice, Bob and Charlie
  aliceCCRequestId1 <- submit alice do
    createCmd TokenMint.TokenMintRequest with
      instrumentId = ccInstrumentId
      recipient = alice
      amount = 100.0
  submit bank do
    exerciseCmd aliceCCRequestId1 TokenMint.AcceptMint
  aliceCCRequestId2 <- submit alice do
    createCmd TokenMint.TokenMintRequest with
      instrumentId = ccInstrumentId
      recipient = alice
      amount = 50.0
  aliceHolding1 <- submit bank do exerciseCmd aliceCCRequestId2 TokenMint.AcceptMint
  bobUSDTRequestId <- submit bob do
    createCmd TokenMint.TokenMintRequest with
      instrumentId = usdtInstrumentId
      recipient = bob
      amount = 200.0
  submit bank do exerciseCmd bobUSDTRequestId TokenMint.AcceptMint
  charlieCCRequestId <- submit charlie do
    createCmd TokenMint.TokenMintRequest with
      instrumentId = usdtInstrumentId
      recipient = charlie
      amount = 300.0
  submit bank do exerciseCmd charlieCCRequestId TokenMint.AcceptMint
  
  -- Check holdings
  aliceHoldings <- TokenHoldingScripts.listHoldings alice ccInstrumentId
  assertMsg "Alice should have 2 CC holdings" (length aliceHoldings == 2)
  bobHoldings <- TokenHoldingScripts.listHoldings bob (Api.Token.HoldingV1.InstrumentId with admin = bank, id = "USDT")
  assertMsg "Bob should have 1 USDT holding" (length bobHoldings == 1)
  charlieHoldings <- TokenHoldingScripts.listHoldings charlie (Api.Token.HoldingV1.InstrumentId with admin = bank, id = "USDT")
  assertMsg "Charlie should have 1 USDT holding" (length charlieHoldings == 1)

  -- Check balances
  aliceBalances <- TokenHoldingScripts.balanceOf alice ccInstrumentId
  assertMsg "Alice should have 150 CC" (aliceBalances == 150.0)
  bobBalances <- TokenHoldingScripts.balanceOf bob usdtInstrumentId
  assertMsg "Bob should have 200 USDT" (bobBalances == 200.0)
  charlieBalances <- TokenHoldingScripts.balanceOf charlie usdtInstrumentId
  assertMsg "Charlie should have 300 USDT" (charlieBalances == 300.0)

  pure (HoldingState bank alice bob charlie ccInstrumentId usdtInstrumentId aliceHoldings bobHoldings charlieHoldings)