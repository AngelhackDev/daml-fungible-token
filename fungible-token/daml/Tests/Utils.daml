module Tests.Utils where

import Daml.Script
import DA.Optional (fromSome)
import qualified DA.TextMap as TextMap

import Splice.Api.Token.MetadataV1 as Api.Token.MetadataV1

createParty : Text -> Script Party
createParty name = do
  party <- allocateParty name
  userId <- validateUserId name
  createUser (User userId (Some party)) [CanActAs party]
  pure party

emptyExtraArgs : ExtraArgs
emptyExtraArgs = ExtraArgs with
  context = ChoiceContext with values = TextMap.empty
  meta = emptyMetadata

queryDisclosures: forall t p. (Template t, IsParties p) => p -> [ContractId t] -> Script [Optional Disclosure]
queryDisclosures p cs = mapA (queryDisclosure p) cs

fromSomes: forall a. [Optional a] -> [a]
fromSomes = map fromSome